### day02
#### 实体

     &nbsp空格
     &lt 小于号
     &gt 大于号
     &copy 版权符号

 #### 列表
有序列表
无序列表
定义列表
无序列表    

 使用ul标签来创建一个无序列表
 在ul中使用li（list item）表示列表项
 - 有序列表
 使用ol标签来创建一个有序列表 
 - 列表之间是可以互相嵌套的
 - 使用场景：网页中所有成组出现的内容都可以使用列表
#### 其他标签
##### HTML5新增的语义化标签，用来表示网页中的不同部分<br>
**heder**用来表示网页或者网页某一块的头部<br>
**main**用来表示网页主体，一个网页只能有一个主体<br>
**foote**r用来表示网页某一块头部<br>
**aside**用来表示和主体无关的内容<br>
**hgroup** 表示一个标题组<br>
**nav** 表示导航菜单<br>
**section** 表示独立的区块，如果你的内容和上边的内容都对不上可以使用section

#### 图片<br>
##### 使用img来引入图片
> 属性

==src==指定一个外部图片的路径

==alt==设置图片描述 通常alt中的文字只会在图片无法显示时才出现

    通常alt中的文字只会在图片无法显示时才出现
    搜索引擎会通过alt的内容来识别图片，
    如果不写alt属性，搜索引擎不会对图片进行收录
    屏幕阅读器也会通过alt属性来识别图片
    默认情况下，图片会百分百的在网页中直接呈现
    图片多大，在网页中就显示多大
    可以通过width和height属性来修改图片的大小


> 路径

==绝对路径==

    当我们需要向网页引入一个外部文件，或跳转到一个外部文件就需要路径
    相对路径通常情况绝对路径用于引入外部网站的图片
    http://dingyue.ws.126.net/2020/0314/587823fbj00q75aqg000vc000f300dbm.jpg


==相对路径==

    需要引入项目的内部图片通常会使用相对路径

相对路径写法

.==/开头==

    表示当前文件所在目录（路径写在哪个文件里，哪个文件就是当前文件）
    在这个案例中，当前文件时06_路径.html
    当前文件所在目录就是day02
    如果路径是以./开头，则可以省略./

../开头

     ..表示当前文件所在目录的上一级目录
    ../../表示上两级目录

### day03

#### 内联框架

#### ==iframe==
> - 内联框架用于向网页中引入一个其他页面

属性：

    src 指向一个页面的地址
    width 指定框架的宽度
    height 指定框架的高度
    frameborder 设置框架的边框
    可选值：
      0 表示没有
      1 默认值，表示有

- 内联框架使用的频率不高，内联框架引入的网页不会影响当前页面的SEO!

#### ==音视频标签==

> 使用audio标签来引入一个音频文件

    属性：
    			src 指定外部资源的路径
    			controls 是否显示播放控件
    				属性名和属性值一样的属性，可以省略属性值
    			autoplay 音乐是否自动播放
    				- 自动播放这个功能在大部分浏览器中都被禁止
    			loop 音乐是否循环播放
    			muted 音频是否自动静音
    			
    		引入音频后，默认情况下用户是不能手动控制音频播放	

#### ==超链接==
使用a标签来创建一个超链接，通过超链接可以从一个页面跳转到另一个页面
    
        属性
    				- href 用来指定链接目标位置
    					- 可以指定一个绝对路径来跳转到外部页面
    					- 也可以指定一个相对路径跳转到内部页面
    				- target 用来指定打开页面位置
    					可选值：
    						_self 默认值 直接在当前窗口打开链接
    						_blank 在一个新窗口中打开链接
    				
    				跳转到页面中最后一个超链接所在的位置 
    		href可以设置为 #id属性值 则点击超链接时可以跳转到指定元素所在的位置


### css简介
可以将CSS编写head标签中的style标签里

				- 这种编写样式的方式称为内部样式
				- 内部样式将HTML和CSS进行分离，
					html写在body中，css写在style标签中，降低了二者间的耦合
					方便后期的维护
				- 在内部样式表中，需要通过选择器来选中元素，
					从而为元素设置样式，这样可以使样式在当前页面中进行复用
				- 缺点：内部样式只能在当前页面中复用
							如果其他页面也需要相同的样式
							只能复制粘贴

CSS（层叠样式表）

				- 一个网页由三个部分组成：结构、表现和行为。
				- CSS负责页面的表现
				- 网页是一个多层的结构，通过CSS可以分别为页面的每一层设置样式
					一层盖着一层，最终呈现给用户是网页的最上层

编写CSS的位置

				① 可以直接将CSS样式编写到标签的style属性中
					这种编写样式的方式称为内联样式（行内样式）
					在开发中不推荐使用内联样式
					- 内联样式只对当元素生效，不会影响其他元素
						导致样式不方便复用
					- 将样式直接编写到html标签的内部，属于结构与表现之间耦合
						不方便后期的维护
					
				<p style="color:red;background-color: yellow;font-size: 80px;">今天天气真不错！</p>
				<p style="color:red;background-color: yellow;font-size: 80px;">哈哈哈哈哈哈哈哈哈</p>

#### 外部样式表
 可以将样式表编写到一个外部的CSS文件中
				然后通过link标签来将外部的样式表引入到当前网页中
				
				这种设置样式的方式称为外部样式表
					- 外部样式表将表现和结构完全分离，方便后期的维护
					- 外部样式表可以在不同的页面中进行复用
					- 使用外部样式表可以利用到浏览器的缓存机制
						加快网页的加载速度
#### css基本语法
CSS注释，在CSS中应该使用这种注释，同样不能交叉嵌套<br>


        CSS语法由两个部分组成：
    				选择器 声明块
    
                选择器：
                - 选择器用来选中页面中的指定元素
    				
    			声明块：
    				- 声明块用来为选中的元素设置样式
    				- 声明块的语法：
    					- 声明块由一对大括号括起来
    					- 大括号里边是一个一个的声明
    					- 声明是一个名值对结构
    						一个样式名对应一个样式值
    						样式名和样式值使用:连接，以;结尾

## day04

### 基本选择器
==元素选择器==
> 作用：通过标签名选中页面中的所有元素<br>
> 语法：标签名<br>
> 例子：p{} h1{} a{} header{} div{}

==id选择器==
>作用：根据元素的id属性值来选中一个元素<br>
>语法：#id属性值<br>
>例子：#p1{} #box{} #wrapper{}

==class选择器==
>作用：根据元素的class数值来选中元素<br>
>语法：.class属性值<br>
>例子：.p1{} .box{} .wrapper{}

==通配选择器==：
>作用：选中页面中的所有元素<br>
>语法：*

### 属性选择器

					作用：根据元素的属性来选中元素
					语法：
						[属性名]
							- 选中含有某个属性的元素
						[属性名=属性值]
							- 选中某个属性等于某个值的元素	
						[属性名^=属性值]
							- 选中属性以指定内容开头的元素
						[属性名$=属性值]
							- 选中属性以指定内容结尾的元素
						[属性名*=属性值]
							- 选中属性包含指定内容的元素

### 符合选择器
==交集选择器==

					作用：可以选中同时符合多个选择器的元素
					语法：选择器1选择器2选择器3...选择器N{}
					例子：div.box1.box2.box3{}
					注意：
						- 交集选择器中有元素选择器时，必须以元素开头
						- 类似于 p#p1 这样的选择器一般不用

==选择器分组（并集选择器）==

					作用：可以为多个选择器选中元素
					语法：选择器1,选择器2,选择器3,...选择器N{}
					例子：div, p, .box1, #wrapper{}

#### 关系选择器
==后代选择器==

					作用：选中指定元素的后代元素
					语法：祖先 后代{}
					例子：div p{} .box1 div{}

==子元素选择器==

					作用：选中指定元素的子元素
					语法：父元素>子元素{}
					例子：div>p{}
==兄弟元素选择器==	
				
					作用：选中指定元素的兄弟元素
					语法：兄+弟{} 选中下一个兄弟元素
						  兄~弟{} 选中下边所有的兄弟元素
> ### 伪类选择器（==非常重要==）
> 超链接相关的伪类：

         伪类
    				- 伪类用来表示元素所处的特殊状态
    					比如：访问过的超链接，鼠标移入的元素，鼠标点击的元素
    				- 伪类都是以:开头
    				- 超链接相关的伪类：                       
    				    :link 没有访问过的链接
    					:visited 访问过的链接
    					:hover 鼠标移入的链接
    					:active 鼠标点击的链接
    					
    				- 以上四个伪类
    					:link 和 :visited是超链接独有的
    					:hover 和 :active可以用于其他元素

### 结构伪类 （==非常重要==）


                伪类选择器
                :first-child 表示第一个子元素
    			:first-of-type 表示同类型中的第一个子元素
    			
    			:last-child 表示最后一个子元素
    			:last-of-type 表示同类型中的最后一个子元素
    			
    			:nth-child() 表示第n个子元素
    			:nth-of-type() 表示同类型中的第n个子元素
    否定伪类：
                :not()
    				- 否定伪类
    				- 作用：将符合条件的元素从已有元素中去除
### 伪元素

     伪元素
    		 	- 伪元素用来表示一些特殊的位置
    			- 通常伪元素需要以::开头
    			
    			::selection 表示被选中的内容
    			::first-letter 首字母(汉字)
    			::first-line 文字的首行
    			::before
    				- 表示元素内部的起始位置
    			::after
    				- 表示元素内部的结束位置
    				
    			- 在before和after中可以通过content来为两个位置添加内容，
    				content中的文字必须使用引号引起来。

---
## day05

### 嵌套规则
在网页中，元素可以分成两大类
				块元素 和 行内元素（内联元素）

    块元素  （block）
                - 块元素在网页中会独占一行
    			- 学习过的块元素
    				h1~h6 header main footer article nav section ul li...
    			- 块元素主要用来将网页区分不同的区域
    			- 最常用的块元素就是 div
    				div没有语义，就表示一个独立的区域
    行内元素（inline）
    			- 行内元素在网页中不会独占一行，只会占有自身大小
    			- 学习过的行内元素
    				a
    			- 行内元素永远包裹文字，标识文字所代表的意义
    			- 最常用的行内元素就是 span
    				span没有语义，就表示一段文字
    替换元素
    				- 替换元素和行内元素类似，但是替换元素不会直接在网页中显示
    					而是会被其他的内容所替换
    				- 学习过的替换元素：
    					img iframe audio video ...
    元素的嵌套规则：
    			1.通常情况下块元素中可以嵌套块元素也可以嵌套行内元素
    			2.在行内元素只能嵌套行内元素不能嵌套块元素
    			特殊情况：
    				在p元素不能嵌套任何的块元素
    				在a元素中可以嵌套除了它本身以外的任意元素
### 继承
==样式的继承==

和现实生活中后代可以继承祖先的财产一样

                 在CSS后代元素也可以继承到祖先元素上的样式
    			- 当我们为祖先元素设置样式时，其后代元素也会应用上相同的样式
    			- 继承的存在的大大的简化了我们的开发，
    				有了继承后我们可以将样式统一设置到一个元素上
    				这样它的所有的后代元素便都可以继承到该样式
    			- 但是并不是所有的样式都会被继承
    				比如：背景相关的样式、布局相关的样式都是不会被继承的
### 选择器优先权
样式的冲突

- [ ] 当我们通过不同的选择器选中同一个元素，同时为同一个样式设置不同的值此时就发生了样式的冲突
- [ ]  当发生样式冲突时，哪个样式会生效由选择器的优先级决定
					
				选择器的优先级（选择器的权重）
					内联样式          1,0,0,0
					id选择器		      0,1,0,0
					类和伪类选择器     0,0,1,0
					元素选择器		  0,0,0,1
					通配选择器		  0,0,0,0
					继承的样式         没有优先级
					
				- 优先级的计算需要将多个选择器加在一起计算，
					注意选择器分组中的选择器都是单独计算的
				- 优先级在计算是不会超过最大的数量的级
				- 如果两个选择器的优先级一样，则优先显示靠下的样式
				- 如果为一个样式添加了 !important 则该样式会自动获得一个最高的优先级
					将会优先于所有的样式显示甚至超过内联样式！慎用！
	
### 超链接伪类顺序
a的伪类的顺序
- [ ] 					:link
- [ ] 					:visited
- [ ] 					:hover
- [ ] 					:active

### 单位
##### 长度单位
==像素==（px）<br>
==百分比==（%）:
> 百分比会自动依据父元素的指定属性去计算大小，使用百分比作为单位时，元素可以根据父元素的大小自动改变

##### 颜色单位：


					颜色单位：
						1.颜色名
						- 在CSS中可以直接使用颜色名来表示各种颜色
							red orange yellow green blue tomato gold...
						
						2.RGB值
						- RGB值就是通过红、绿和蓝三种颜色调配出其他各种不同颜色
						- 语法：
							RGB(红色,绿色,蓝色)
							- 每种值的取值范围 0 - 255 之间
							- 值也可以取在 0% - 100% 之间
							
						3.十六进制的RGB值
							- 使用十六进制的数字来表示颜色
							- 语法：
								#红色绿色蓝色
									颜色的取值范围00-ff
							- 使用十六进制颜色时，
								如果颜色是两位两位重复的
								则可以省略一位
									#aabbcc #abc
									#bbffaa #bfa
#### 盒子模型
- 每一个元素最内部的区域称为内容区==（content==）
- 边框是盒子可见框的最边缘 边框（border）
-
        要设置边框需要使用三个属性
							边框的宽度
								border-width
							边框的颜色
								border-color
							边框的样式
								border-style

盒子模型、盒模型、框模型（box model）
- 网页布局面临的两个问题一个是元素的大小，一个是元素的位置
- 在CSS中将页面中的每一个元素都设置为了一个矩形的盒子
-所有元素都是矩形，这样网页的布局就变成将不同的矩形摆放到不同的位置
- 每一个元素从内到外由以下几个部分组成：
>					内容区（content）内边距（padding）边框（border）外边距（margin）

#### 边框（border）
边框是盒子可见框的边缘，边框也会影响盒子可见框的大小
    
        边框的宽度 
    					- 使用border-width来设置边框的宽度
    					- 该属性可以同时指定四个边框的宽度，也可以分别指定
    					- 如果指定了四个值：
    						分别表示：上 右 下 左 四个方向的边框
    					- 如果指定了三个值：
    						分别表示：上 左右 下
    					- 如果指定了两个值：
    						分别表示：上下 左右
    					- 如果指定了一个值：
    						则四个方向都是该值
    						-除了border-width，在css中还提供了四个border-xxx-width
    					xxx可以是 top right bottom left

#### 内边距（padding）
- 边框和内容区之间的距离叫做内边距
- 内边距会影响到盒子的可见框的大小
- 一个盒子的可见框大小由三个部分决定
						==内容区==
							==内边距==
							==边框==
- 一共有四个方向的内边距,元素背景颜色，默认是会延伸到内边距
  - padding-top 上内边距
  - padding-right 右内边距
  - padding-bottom 下内边距
  - padding-left 

#### 外边距（margin）

- 外边距决定盒子之间的距离（盒子位置）
- 外边距不会影响盒子可见框的大小，但是会影响到盒子的实际大小


        margin-left如果是一个正值，元素会向右移动 
    					如果是一个负值，元素会向左移动
                    由于元素在页面中默认是靠左上排列的
    				所以默认情况下，设置左和上外边距时会移动元素本身
    				而设置下和右外边距时，会移动相邻的元素 
       
    				width也可以设置为auto，甚至它的默认值实际上就是auto 
    				如果将width设置为auto，浏览器会自动使width尽可能的大
    				如果将width设置为auto，则margin-left和right的auto将会自动设置为0


​			
### day06
#### 外边距的折叠
					- 在网页中垂直方向相邻的外边距会发生外边距折叠现象
					- 兄弟元素外边距折叠：
						兄弟元素间相邻的垂直外边距会取最大值
					- 父子元素外边距折叠：
						子元素的上外边距会传递给父元素
						子元素和父元素相邻的下外边距不会产生任何的效果
						
					- 兄弟元素间的外边距折叠不需要处理，
						但是父子元素间的上外边距折叠必须要处理
#### 行内元素盒模型

- [ ] 内容区 
	- 行内元素不支持宽度和高度的设置
    - 行内元素的宽度和高度都是被内容撑开的
- [ ] 内容区 
	- 行内元素不支持宽度和高度的设置
    - 行内元素的宽度和高度都是被内容撑开的
- [ ] 边框
 	- 行内元素可以设置边框，但是垂直方向的边框不会影响页面的布局
- [ ]  外边距
    - 行内元素可以设置外边距，但是垂直方向的外边距不会影响到页面的布局
#### 文档流（==normal flow==）
- 网页是一个多层的结构，一层摞着一层
- 在网页的最底层、最基础的层被称为文档流
- 元素创建后默认都在文档流中排列
- 
      - 网页是一个多层的结构，一层摞着一层
	    		- 在网页的最底层、最基础的层被称为文档流
	    			元素创建后默认都在文档流中排列
##### 默认样式

默认样式表
            可以通过引入重置样式表，来清除默认样式
			
> 浏览器为了确保网页在没有CSS样式的前提下也可以正常浏览，
> 但是这些默认的样式会影响到我们所编写的样式,且在不同的浏览器中，默认样式也会有一些差异,所以在编写网页前，我们都需要去除调浏览器的默认样式

			重置样式表有两个版本：
				reset.css
					- reset.css会直接将浏览器中的所有默认样式去除
				normalize.css
					- normalize.css并不是简单去除这些样式
						而是去除那些不必要，统一那些需要使用的


​                    
-  可见框的总宽度:
    -  ==border-left + padding-left + width + padding-right + border-right==
- 可见框的总高度：
    - ==border-top + padding+top + height + padding-bottom + border-==bottom====
## day07
#### overflow- 用来设置元素如何处理溢出的内容
						- 可选值：
							visible 默认值 溢出的内容直接在元素以外的位置显示
							hidden 溢出的内容会被裁剪，隐藏不显示
							scroll 出现滚动条，可以通过滚动条来查看完整的内容
								- 无论哪个方向溢出，总会生成双方向的滚动条
							auto 根据需要生成滚动条
（子元素是排列在父元素的内容区，当子元素的大小超过了父元素，此时元素会从父元素中溢出）

#### display-用来设置元素的显示的类型
                             - 可选值：
    						inline 元素将会以行内元素的形式显示
    						block 元素将会一个块元素的形式显示
    						inline-block 元素将会以行内块元素的形式呈现
    							行内块：
    								元素既有块元素的特点可以设置宽高
    									也有行内元素的特点，不会独占一行
    						table 元素将会以表格的形式显示
    						none 元素不会在页面中显示
#### visibility - 用来设置元素是否显示
						- 可选值：
							visible 默认值 元素在网页中正常显示
							hidden 元素会在页面中隐藏，但是依然占据页面的位置

#### box-sizing- 用来设置可见框大小的计算方式


元素的可见框大小由:==内容区 内边距 边框 共同决定==<br>
默认情况下width和height指定的是内容区的大小


						- 可选值：
						content-box
							- 默认值，width和height设置的是内容区的大小
						border-box
						- width和height指定的是整个盒子的大小，
				此时如果没有边框和内边距，那么width和height将会全部设置为内容区
				如果设置了边框和内边距，将会向内挤压内容区，以确保盒子可见框的大小不变
#### 轮廓 (outline)

```
轮廓 的做用和边框类似 不同点在于设置轮廓时不会影响页面的布局
        /* outline: 10px red solid; */
```
#### 阴影（box-shadow）
用来指定盒子的阴影效果
[link](http://127.0.0.1:8848/code/day07/05_%E9%98%B4%E5%BD%B1.html/)

            - 阴影涉及到样式
    						阴影的颜色
    						阴影的位置（偏移量）
    							水平位移（正值向右，负值向左）
    							垂直位置（正值向下，负值向上）
    						虚化半径（模糊半径）
    						内阴影 inset
    						
    					- RGBA()
    						- 相比RGB，RGBA多了一个透明度的设置
    						- a（alpha）表示不透明度
    							如果是 1 ，则表示完全不透明
    							如果是 0 ，则表示完全透明
    					-写法：
    			        /* box-shadow: rgba(0,0,0,.2) 10px 10px 20px; */
    			        /* box-shadow: rgba(0,0,0,.2) 0 0 20px; */
    			        /* box-shadow: rgba(0,0,0,.2) 10px 10px 20px inset; */

### 圆角（radius）

```
border-top-left-radius 
						- 左上角的圆角
						- 指定的是圆形的半径，值越大圆角的弧度就越大
 border-radius 可以同时设置四个角的圆角
 如果指定四个值，则分别表示 左上 右上 右下 左下
 如果元素宽度和高度一样，只需将border-radius设置50%，即可得到一个正圆
```


### day08
#### 浮动（float）
- 使用float来设置浮动
    - 通过设置浮动可以使一个元素向页面（父元素）的左侧或右侧移动

```
- 可选值：
					none 默认值，元素不浮动
					left 元素向左浮动（向父元素的左侧移动）
					right 元素向右浮动（向父元素的右侧移动）
							
					- 浮动的特点：
					1.设置浮动以后，元素会从文档流中脱离，然后向父元素的左侧或右侧移动
					（脱离文档流后，元素将会不在占用文档流的位置
								在它下边的元素，会自动上移）
					2.浮动元素无论是左移还是右移都是在父元素的范围内移动
					3.浮动元素不会盖住浮动元素
					4.浮动元素不会超过它上边的兄弟元素，最多一边齐
```
#### 浮动的特点：
- 浮动后元素会脱落文档流
- 浮动元素会向父元素的左侧或右侧移动（不会移动出父元素）
- 浮动元素不会被浮动元素覆盖
- 浮动元素不会超过它上边的兄弟元素
- 浮动父元素不会盖住文字，文字会环绕在浮动元素的周围
-浮动会使元素脱离文档流
```
            		- 元素在文档流中特点：
							块元素
								- 块元素在文档流中自上向下垂直排列
								- 块元素在文档流中默认宽度是父元素的全部
								- 块元素在文档流中默认高度被内容撑开
							行内元素
								- 行内元素在文档流中自左向右水平排列
								- 行内元素在文档流中默认宽度和高度都被内容撑开
								
						- 元素脱离文档流后的特点：
							行内元素
								- 脱离文档流后行内元素会变成块元素
							块元素
								- 脱离文档流后，块元素不在独占一行
								- 脱离文档流后，块元素的宽度和高度都被内容撑开
```

#### 高度塌陷

```
	当子元素设置浮动后，子元素将会脱离文档流，
	脱离文档流后，子元素将无法撑开父元素的高度，
	导致父元素高度丢失，这就是高度塌陷问题
	父元素高度一旦塌陷，则其后的元素会自动上移
	导致整页面的布局变得混乱，高度塌陷是使用浮动布局带来的最大的问题，必须要处理
```
#### BFC(Block Formatting Context) 块级格式化上下文

```
- BFC是元素的隐含属性
			- 当元素开启BFC后会具有如下一些特性：
							1.开启BFC后子元素外边距不会传递给父元素
							2.开启BFC后元素不会被浮动元素所覆盖
							3.开启BFC后父元素可以包含浮动的子元素
		BFC是元素的隐含属性无法直接开启，而是需要通过一些属性间接开启
			开启BFC的方式：
				注意：开启BFC都是间接开启，所以这些样式多多少少会存在一些副作用
						1.可以将元素设置为行内块元素（宽度丢失）
						2.可以将元素设置浮动（导致元素脱离文档流）
						3.可以将元素的overflow设置为一个非默认的值（visible）
						
				通常情况下，可以通过为父元素设置一个overflow:hidden来开启它的BFC
					从而解决元素的高度塌陷问题
```

#### clear 
作用：清除浮动父元素对当前元素的影响

```
可选值：
			left 清除左侧浮动元素对当前元素的影响
			right 清除右侧浮动元素对当前元素的影响
			both 清除两侧中对当前元素影响最大的
				
			clear的原理：使用clear时，浏览器会自动为当前元素设置一个上外边距
				利用clear，可以创建一种更好的更完美的解决高度塌陷方案！
            /* ::after伪元素，用于选中元素的结尾位置*/
			.clearfix::after{
			/* 添加内容 */
			content: '';
			/* 转换为块元素 */
			display: block;
			/* 清除浮动 */
			clear: both;
			}
```
#### 外边距折叠

```
	完整版的clearfix，可以同时解决高度塌陷和外边距折叠的问题 
			.clearfix::before,
			.clearfix::after{
				content: '';
				display: table;
				clear: both;
			}
```
### day09
#### 定位（==position==）
> 通过定位可以将一个元素摆放到页面的中的任意位置<br>
> 使用position属性来设置元素的定位

```
可选值：
							static 默认值 元素没有开启定位
							relative 开启元素的相对定位
							absolute 开启元素的绝对定位
							fixed 开启元素的固定定位
```
#### 相对定位（relative）
当元素position值设置为relative时，则开启了元素的相对定位
**相对定位的特点**：
> 1.当为元素开启相对定位而不设置其他属性时，元素不会发生任何变化
> 2.相对定位的元素不会脱离文档流，元素的性质也不会发生变化
> 3.相对定位的元素是相对于自身在文档流中的位置进行定位
> 4.相对定位会提升元素的层级

```
- 当元素开启了定位，我们可以通过四个偏移量来改变元素的位置
							top
								- top表示当前元素上侧距离定位位置上侧的距离
							left
								- left表示当前元素左侧距离定位位置左侧的距离
							bottom
								- bottom表示当前元素下侧距离定位位置下侧的距离
							right
								- right表示当前元素的右侧距离定位位置右侧的距离
								
							注意：通常情况下，四个值中最多只需要使用两个
									即可确定一个元素的位置（水平 垂直）
									top left
									top right
									bottom left
									bottom right
									
						在移动一个定位元素时，通常不会影响其他的元素
```
#### 绝对定位（absolute）
> 当将元素position属性值设置为absolute时，则开启了元素的绝对定位
```
- 绝对定位的特点：
				1.开启绝对定位后，如果不设置其他属性元素的位置不会发生变化
				2.开启绝对定位后，元素会脱落文档流，元素的性质会发生变化
					（行内元素变成块元素，块元素的宽度和高度被内容撑开）
				3.绝对定位元素是参照于离它最近的开启了定位的祖先元素进行定位的
				如果所有的祖先元素都没有开启定位，则元素参照于根元素进行定位
				（通常情况下，为一个元素开启了绝对定位，同时也会为它的父元素开启相对定位）
				4.绝对定位会提升元素的层级
```
#### 固定定位（fixed)
> 当元素的position属性值设置为fixed时，则开启了元素的固定定位
> 注意：固定定位的大部分特点都和绝对定位一样
> 唯一不同点在于，固定定位的元素总是参照于视口（viewport）进行定位
> 元素会固定在视口的某一个位置，不会随网页一起滚动

#### 层级（z-index)
- 三种定位都和提升元素的层级，并且元素的层级是一样
- 层级一样时，靠下的元素会盖住上边的元素
- 只有开启了定位的元素才能设置z-index
- 父元素的层级再高，也不能盖住子元素
```
可以通过z-index来改变元素的层级，
					z-index需要一个整数作为参数，值越大层级越高，
						层级越高越优先显示，层级一样优先显示靠下的
					x轴 水平位置
					y轴 垂直位置
					z轴 距离人眼的距离
					z-index值越大，元素距离人眼越近，层级越高
						层级越高元素越优先显示
```
#### 包含块（ containing block）
- 当我们使用百分比作为单位时，元素的样式值将会参照于包含块的指定的值去计算
- 通常情况下元素的包含块就是离它最近的祖先块元素
- 对于绝对定位元素来说，包含块是离它最近的开启了定位的祖先元素
- 如果所有的祖先元素都没有开启定位则包含块就是初始包含块（html根元素）
- 对于固定定位元素包含块就是浏览器的窗口（视口）
#### 居中
在盒子模型中，元素的实际宽度必须要等于其包含块内容区的宽度

```
	- 水平方向等式依然强制满足，只不过值由7个变成了九个
					
					left/right + margin-left/right + border-left/right + padding-left/right + width = 包含块的宽度
					
					left/right + margin-left/right + width = 包含块的宽度
					
					- left和right的默认值是auto，浏览器会自动计算left和right值以使绝对定位元素保持在原来的位置
					
					auto + 0 + 200 + 0 + auto = 800
					0 + 0 + 200 + 0 + 0 = 800?
						- 绝对定位等式不满足时，默认会调整右侧偏移量以使等式满足
						
					0 + auto + 200 + auto + 0 = 800	
					
					
					注意：当开启绝对定位，垂直方向的等式也变成强制满足
						top/bottom + margin-top/bottom + border-top/bottom + padding-top/bottom + height = 包含块的高度
						
						
					让一个绝对定位元素在包含块中水平居中
						left:0;
						right:0;
						margin:0 auto;
						width:xxx；
						
					让一个绝对定位元素在包含块中垂直居中
						top:0;
						bottom:0;
						margin:auto 0;
						height:xxx;
						
					让一个绝对定位元素铺满包含块
						top:0;
						bottom:0;
						left:0;
						right:0;
						width:auto;
						height:auto;
```
## day10
#### 字体（font）
color（前景色） 可以用来设置文字的颜色
- 当没有为边框指定颜色时，边框颜色也会采用color的颜色值
```

	font-size用来指定字体的大小
						
	长度单位 
		em 	
		- 1em 等于 当前元素的1个font-size
						
		rem
		- 1rem 等于 根元素的1个font-size
	font-family用来指定使用的字体
					
		字体的分类
			- 一下几种并不是一个具体的字体，而是一类字体
				serif- 衬线字体
				sans-serif- 非衬线字体
				monospace- 等宽字体
			- 当我们使用字体分类，浏览器会自动选择具体字体使用
			font-family 用来指定字体族，该样式可以同时指定多个字体
						指定的多个字体，浏览器会按照顺序使用
						一般最后一个字体都是sans-serif或serif
			font 简写属性，可以设置所有的字体相关的样式
						语法：
							font: 字体大小 字体族;
							
						font这个属性一般都是统一设置在body元素上的
```
#### 行高（line-height)
- [ ] 文字在显示时是存在一个行框的
- [ ] 这个行框看不见，但是却真实存在
- [ ] 行高指的就是行框的高度

```
文字会在行高当中垂直居中，
			所以如果希望一段文字在父元素中垂直居中
			可以将行高设置为和父元素高度一样的值
			这种居中只适用于单行文字
						
			行高也可以设置为一个整数
			  如果设置的是一个整数，则表示行高是字体的大小倍数
						
			通过行高也可以设置行间距
						行间距 = 行高 - 字体大小
```
#### 加粗和斜体

```
font-weight 设置字体的加粗效果	
			normal 默认值 正常显示
			bold   字体加粗
				- 也可以通过 100 - 900九个值来指定文字的粗细的级别
					100 最细的
					900 最粗的	
			- 不同字体粗细实际上是由计算机中不同字体决定的，
				但是通常计算机中不会安装这么多不同粗细的字体
				所以100-900并不是所有的值都会发生变化
```


					font-style 设置字体的斜体	
						normal 默认值 正常显示
						italic 表示斜体

==font简写属性，可以同时设置所有的字体相关的样式==
< 书写语法：
- [ ] 字体族必须是最后一个属性
- [ ] 字体大小必须是倒数第二个
- [ ] 这两个属性必须写
- [ ] 其他属性写不写，顺序都无所谓
#### 图标字体
> 计算机中的字体，本质就是一个图（矢量图）
> - 矢量图的大小和颜色可以任意改变，不会失真
> - 字体本身存在有很多优点，可以随意放大，可以任意改变颜色
> 如果可以将网页中的小图标都制作为一个字体文件
> 这样我们就可以以使用字体的方式去创建这些小图标了
> 这种技术我们就称为 图标字体（iconfont）

```
图标字体库 fontawesome 的使用方法
					1.下载图标字体库 fontawesome-free-5.13.0-web.zip
					2.解压缩
					3.在项目目录下创建一个文件夹iconfont
					4.将解压后的css和webfonts目录复制到iconfont目录中
					5.在当前页面中，引入all.css
					6.在页面中创建一个元素，并添加两个class
						fas fa-frog
						
					fas类表示字体的类别
					- 免费的字体格式有两种
						fas(solid) 实体的图形
						fab(brand) 品牌相关的图形
						
				- 使用方式：
					1.通过class来使用
					2.可以直接通过实体来使用
						&#x编码;
					3.可以通过伪元素去使用图标字体
						content:"\编码"
						
						fab
							font-family: 'Font Awesome 5 Brands';
							font-weight: 400; 
						fas
							font-family: 'Font Awesome 5 Free';
							font-weight: 900;

```

==图标字体（iconfont）==
> - 就是让我们以使用字体的形式去使用小图标
> - 优点：
>     - 使用方便
> 	- 图片可以任意放大缩小改变颜色
> - 缺点：
> 图标字体只能单色的

#### 其他文本样式
==text-index== 首行缩进
- 他可以是正值也可以是负值
- 如果是负值则文字会向相反的方向的缩减
- 如果是负值则文字会向相反的方向的缩减（如果是负值则文字会向相反的方向的缩减）

==text-decoration==文本修饰 
```
可选值：
						none 什么都没有
						underline 下划线
						line-through 删除线
						overline 上划线
```
==text-align== 文本水平对齐

```
可选值：
						left 左对齐
						right 右对齐
						center 居中对齐
						justify 两端对齐
```
### day11
#### 垂直对齐

- 网页中每一行文字都存在在一个行框中,每一个文字都会有一个文本框
- 文字会写在文本框的内部，通常文字要比文本框小
- 而我们指定font-size实际上是在指定文本框的高度
-
```
基线（baseline）
		- 浏览器在渲染文字并不是把文字直接写在文本框的底部，
					而是将文字写在文本框的基线上
		- 基线是文字显示的一条基准线
					通常文字都应该在基线上排列
					有一些文字可能会超出基线
```

```
vertical-align 用来设置（子元素和父元素间）文字垂直对齐的方式
			可选值：
		    baseline 默认值 子元素中的文字和父元素中的文字是基线对齐
			top 子元素文本框的顶部和父元素文本框的顶部对齐
			bottom 子元素文本框的底部和父元素文本框底部对齐
			middle 将子元素的中线，和父元素基线上字体大小的一半对齐
	    	数值  正值文字上移，负值文字下移
```
#### 其他文本属性
- white-space 指定对空白区域的处理方式
- 		normal 默认值 文字自动换行
- 		nowrap 文字不会自动换行，文字在一行当中显示
- 		pre 会保留文字原来的格式，一般用来表示代码

==设置多余文字显示为省略号的效果==
- [ ] 1.先为元素设置一个宽度
- [ ] 2.设置文字不会自动换行
- [ ] 3.裁剪多余的内容
- [ ] 4.将多余的内容显示为省略号
- [ ] text-overflow: ellipsis; 可以将溢出的内容显示为省略号

## day12
### 背景
==background-color== 用来设置背景颜色<br>
==background-image== 用来设置背景图片
- 背景图片如果和元素大小一样，则可以完整显示
- 背景图片如果大于元素的大小，则只能显示图片的左上角
- 背景图片如果小于元素的大小，则背景图片会在元素中平铺，铺满元素
- 背景图片和颜色可以同时设置，这样背景色将会成为图片的底色
==background-repeat== 用来设置背景图片的重复方式

```
- repeat 默认值，背景图片双方向平铺
					- no-repeat，背景图片不会平铺
					- repeat-x 背景图片沿着x轴，水平方向平铺
					- repeat-y 背景图片沿着y轴，垂直方向平铺
					
					- 在CSS中，指定一个路径时需要使用url()函数
					
```
==background-position==	用来设置背景图片的位置
- 可以通过几个方位词来设置背景图片的位置
    - top right bottom left center
    - 需要在这几个方位词中选择两个来修改背景图片的位置
	- 如果只设置一个值，则第二个值默认就是center
- 也可以通过指定偏移量来修改图片的位置
    - 水平偏移量:正值背景图片向右移动，负值向左移动
    - 垂直偏移量:正值背景图片向下移动，负值向上移动
### 雪碧图

雪碧图的使用步骤
- 确定要使用的图
- 确定图片的大小（129 * 45）
- 创建一个和图片大小一样的元素
- 将雪碧图设置为该元素的背景
- 确定图片的位置并设置背景的偏移量

### ==background-size==	
- 用来设置背景图片的尺寸
- 需要两个值作为参数：第一个值宽度 ，高度
- 如果只指定了一个值，则另一个值自动会设置auto
	- auto会自动缩放以维持图片的比例不变
- 也可以设置一个百分比作为单位，这样将会依据元素的大小计算背景图片的大小

```
- 固定值：
		cover 图片将元素填满，并尽量使背景图完整显示
		contain 完整显示背景图片，有可能有地方没有图片
		
background 背景的简写属性
		- 可以同时设置所有的背景相关的样式
			并且基本上没有位置和数量的需求
		- 特殊要求：
			background-size必须写在background-position的后边		
```
背景图片==定位==时，默认情况下定位的原点是内边距左上角


```
background-origin 用来指定背景图片的定位原点
		可选值：
			padding-box 默认值，背景图片的定位原点在内边距的左上角
			content-box 背景图片的定位原点在内容区的左上角
			border-box 背景图片的定位原点在边框的左上角
```
background-clip 用来指定背景的==裁剪==（背景的显示区域）

```
可选值：
    border-box 默认值，背景会延伸到边框的下边
    padding-box 背景会延伸到内边距上
    content-box 背景只会在内容区上显示
```
使用background简写属性设置 origin 和 clip时，
- 如果只写一个，则两个属性会共享一个值
- 如果写了两个值，则第一个是origin 第二个是 clip
### 表格(table)
- 在网页中使用table标签来创建一个表格
- 在table中，使用tr表示表格中的一行
- 在tr中使用td来表示一个单元格
- 在tr中使用th表示表头中的单元格
- colspan 横向的合并单元
- rowspan 纵向的合并单元格
- caption 用来表示表格的标题
- thead标签
    - 表示表格的头部，可以将头部的tr放入到thead中
- tbody标签
    - 表示表格的主体，可以将主体的tr放入到tbody中
- tbody标签
    - 表示表格的主体，可以将主体的tr放入到tbody中
- border-spacing: 0px；
    - 用来设置表格的边框的距离
- border-collapse: collapse;
    - 用来合并单元格之间的边框
- vertical-align来控制表格元素的垂直居中

```
当我们创建的表格，没有使用thead tbody tfoot这些标签时，
浏览器会自动创建一个tbody标签，并将所有的tr都放入到tbody里

当将一个元素设置为单元格后，虽然可以方便的设置居中效果
但是此时，元素的宽度默认不再是父元素的全部，而是被内容撑开
居中的方式：
    margin（水平居中）
    绝对定位（水平垂直居中）
    表格（水平垂直居中）
```
#### 表单
表单（form）
- 现实生活中使用表单来向别人提交信息
    -银行的单子、个人信息、简历...
- 网页中我们通过表单来向服务器提交信息
    - 百度的搜索框、注册信息、登录信息
- 用户可以通过表单来和服务器进行交互
- 使用form标签来创建一个表单	
	- action表示表单提交的位置（这里需要一个服务器的路径）
- 文本框：
    - 使用 input 来创建一个文本框，它的type属性值为text
    - 数据要真正的提交到服务器中，必须要给表单项指定一个name属性
- 密码框
    - 密码框也是input，不同点在于type属性是password
- 提交按钮：
    - 使用 input 创建提交按钮，它的type属性值为submit
    - 在提交按钮中，使用value属性来指定按钮上的文字
- 选按钮
	- 使用input，type属性值为radio来创建一个单选按钮
	- 单选按钮是需要通过name属性来分组的，
		name相同的为一组，同一组中只能有一个被选中
		像这种选择框，不需要用户填写的，还必须指定一个value值，
		value值最终将会被提交给服务器
		如果为单选按钮添加一个checked属性，则按钮将会变为默认选
- 无语义按钮==type="button"==
- 重置按钮 ==type="reset"==
- 开头标签
    - label可以用来放置表单中的提示文字
					label中可以指定一个for属性，for属性的值是一个id
					此时点击label后，对应id的元素将会自动获取焦点
- 多选项
    - 使用input，type值checkbox来创建多选框


```
列：
<input type="checkbox" name="hobby" value="ymq" checked>羽毛球
```

- 下拉列表
	- 使用select标签来创建下拉列表
	- 在select中，使用option来表示列表项
	- 下拉列表的name属性要指定给select标签，value属性要指定给option标签
	- 可以为option添加一个selected来将option设置为默认选中
	- optgroup 可以用来为option进行分组
### day12
#### ==表单属性==
- autocomplete 设置表单项是否会自动补全
					
```
可选值：
						on 开启自动补全（默认值）
						off 关闭自动补全
        如果将 autocomplete 添加到form标签上，
					则设置会对整个表单都生效
```
- autofocus 设置表单项自动获取焦点	
- disabled 禁用表单项 ，表单项不可修改同时不会被提交
- readonly 表单项是只读，表单项不可修改但是会提交
- required 表单项是必须填写的，在不同的浏览器中显示效果不一致
- placeholder 设置占位符（水印）
- 焦点时
    - 当input获取焦点时，修改表单的样式 
    -  .inp-wrapper input:focus